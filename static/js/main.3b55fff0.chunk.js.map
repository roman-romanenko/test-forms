{"version":3,"sources":["components/NewPost.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["NewPost","React","memo","props","onAdd","postId","useState","avatar","setAvatar","name","setName","comment","setComment","isValidUrl","setIsValidUrl","nameError","setNameError","commentError","setCommentError","onSubmit","event","preventDefault","trim","length","newPost","id","fetch","method","then","res","headers","get","result","startsWith","catch","finally","TextField","required","error","fullWidth","label","placeholder","variant","style","marginTop","marginLeft","value","onChange","e","target","type","maxHeight","multiline","rows","Button","width","startIcon","PostList","posts","List","sx","bgcolor","map","post","ListItem","backgroundColor","borderRadius","marginBottom","ListItemAvatar","Avatar","src","alt","deepOrange","ListItemText","primary","secondary","wordWrap","App","JSON","parse","localStorage","getItem","setPosts","className","Grid","container","spacing","item","xs","prevPosts","setItem","stringify","textAlign","fontWeight","reverse","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAYaA,EAA2BC,IAAMC,MAAK,SAACC,GAClD,IAAQC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OACf,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAwCV,oBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KAuCA,OACE,mCACE,uBAAMC,SAvCW,SAACC,GAKpB,GAJAA,EAAMC,iBACNH,EAA0C,IAA1BP,EAAQW,OAAOC,QAC/BP,EAAoC,IAAvBP,EAAKa,OAAOC,QAEE,IAAvBd,EAAKa,OAAOC,QAA0C,IAA1BZ,EAAQW,OAAOC,OAA/C,CAIA,IAAMC,EAAgB,CACpBC,GAAIpB,EACJI,KAAMA,EAAKa,OACXf,SACAM,aACAF,WAGFe,MAAMnB,EAAQ,CAAEoB,OAAQ,SACrBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAAQC,IAAI,mBAC5BH,MAAK,SAAAI,GACAA,IACFR,EAAQX,WAAamB,EAAOC,WAAW,aAG1CC,OAAM,kBAAMpB,GAAc,MAC1BqB,SAAQ,WACP/B,EAAMoB,GAENhB,EAAU,IACVE,EAAQ,IACRE,EAAW,IACXE,GAAc,GACdI,GAAgB,GAChBF,GAAa,QAMf,UACE,cAACoB,EAAA,EAAD,CACEC,UAAQ,EACRC,MAAOvB,EACPwB,WAAS,EACTd,GAAG,oBACHe,MAAM,yFACNC,YAAY,qBACZC,QAAQ,WACRC,MAAO,CAAEC,UAAW,GAAIC,WAAY,IACpCC,MAAOrC,EACPsC,SAAU,SAACC,GACTtC,EAAQsC,EAAEC,OAAOH,OACjB9B,GAAa,MAGjB,cAACoB,EAAA,EAAD,CACEc,KAAK,MACLX,WAAS,EACTd,GAAG,oBACHe,MAAM,gJACNC,YAAY,MACZC,QAAQ,WACRC,MAAO,CAAEC,UAAW,GAAIC,WAAY,GAAIM,UAAW,cACnDL,MAAOvC,EACPwC,SAAU,SAACC,GAAD,OAAOxC,EAAUwC,EAAEC,OAAOH,UAGtC,cAACV,EAAA,EAAD,CACEG,WAAS,EACTD,MAAOrB,EACPQ,GAAG,oBACHe,MAAM,2GACNE,QAAQ,WACRU,WAAS,EACTC,KAAM,EACNV,MAAO,CAAEC,UAAW,GAAIC,WAAY,IACpCC,MAAOnC,EACPoC,SAAU,SAACC,GACTpC,EAAWoC,EAAEC,OAAOH,OACpB5B,GAAgB,MAIpB,cAACoC,EAAA,EAAD,CACEZ,QAAQ,YACRQ,KAAK,SACLP,MAAO,CAAEC,UAAW,GAAIC,WAAY,GAAIU,MAAO,OAC/CC,UAAW,cAAC,IAAD,IAJb,sE,sDC3FKC,EAA4BxD,IAAMC,MAAK,SAACC,GACnD,IAAQuD,EAAUvD,EAAVuD,MAER,OACE,mCACE,cAACC,EAAA,EAAD,CAAMC,GAAI,CAAEL,MAAO,OAAQM,QAAS,oBAApC,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,eAACC,EAAA,EAAD,CAAwBrB,MAAO,CAAEsB,gBAAiB,aAAcC,aAAc,GAAIC,aAAc,GAAhG,UACE,cAACC,EAAA,EAAD,UACGL,EAAKlD,WAEF,cAACwD,EAAA,EAAD,UACE,qBAAKC,IAAG,UAAKP,EAAKxD,QAAUgE,IAAG,UAAKR,EAAKtD,MAAQkC,MAAO,CAAEY,MAAO,QAGnE,cAACc,EAAA,EAAD,CAAQT,GAAI,CAAEC,QAASW,IAAW,MAAlC,SAA2CT,EAAKtD,KAAK,OAE3D,cAACgE,EAAA,EAAD,CACEC,QAAO,UAAKX,EAAKtD,MACjBkE,UAAS,UAAKZ,EAAKpD,SACnBgC,MAAO,CAAEiC,SAAU,kBAbRb,EAAKtC,cCbjBoD,EAAgB,WAC3B,MAA0BvE,mBACxBwE,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,OAD9C,mBAAOvB,EAAP,KAAcwB,EAAd,KAIIzD,EAAK,EAELiC,EAAMnC,OAAS,IACjBE,EAAKiC,EAAMA,EAAMnC,OAAS,GAAGE,IAS/B,OACE,sBAAM0D,UAAU,OAAhB,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,8BAAK,cAACxF,EAAD,CAASI,MAVN,SAAC2D,GACfmB,GAAS,SAAAO,GAAS,4BAAQA,GAAR,CAAmB1B,OACrCtC,GAAM,EACNuD,aAAaU,QAAQ,QAASZ,KAAKa,UAAL,sBAAmBjC,GAAnB,CAA0BK,OAOpB1D,OAAQoB,MACtC,mBAAGkB,MAAO,CAAEiD,UAAW,QAASC,WAAY,QAA5C,iFAAsEnC,EAAMnC,UAC3EmC,EAAMnC,OAAS,GAAK,8BAAK,cAACkC,EAAD,CAAUC,MAAO,YAAIA,GAAOoC,iBAGxD,cAACV,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACG9B,EAAMnC,OAAS,GAAK,8BAAK,cAACkC,EAAD,CAAUC,MAAO,YAAIA,GAAOqC,OAAO,GAAGD,sBC7B1EE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3b55fff0.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  onAdd: (post: Post) => void,\n  postId: number,\n};\n\nexport const NewPost: React.FC<Props> = React.memo((props) => {\n  const { onAdd, postId } = props;\n  const [avatar, setAvatar] = useState('');\n  const [name, setName] = useState('');\n  const [comment, setComment] = useState('');\n  const [isValidUrl, setIsValidUrl] = useState(false);\n  const [nameError, setNameError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setCommentError(comment.trim().length === 0);\n    setNameError(name.trim().length === 0);\n\n    if (name.trim().length === 0 || comment.trim().length === 0) {\n      return;\n    }\n\n    const newPost: Post = {\n      id: postId,\n      name: name.trim(),\n      avatar,\n      isValidUrl,\n      comment,\n    };\n\n    fetch(avatar, { method: 'HEAD' })\n      .then(res => res.headers.get('Content-Type'))\n      .then(result => {\n        if (result) {\n          newPost.isValidUrl = result.startsWith('image');\n        }\n      })\n      .catch(() => setIsValidUrl(false))\n      .finally(() => {\n        onAdd(newPost);\n\n        setAvatar('');\n        setName('');\n        setComment('');\n        setIsValidUrl(false);\n        setCommentError(false);\n        setNameError(false);\n      });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          required\n          error={nameError}\n          fullWidth\n          id=\"standard-textarea\"\n          label=\"Введите ваше имя\"\n          placeholder=\"Имя\"\n          variant=\"standard\"\n          style={{ marginTop: 30, marginLeft: 10 }}\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n            setNameError(false);\n          }}\n        />\n        <TextField\n          type=\"url\"\n          fullWidth\n          id=\"standard-textarea\"\n          label=\"Введите ссылку на аватарку\"\n          placeholder=\"URL\"\n          variant=\"standard\"\n          style={{ marginTop: 11, marginLeft: 10, maxHeight: 'minContent' }}\n          value={avatar}\n          onChange={(e) => setAvatar(e.target.value)}\n        />\n\n        <TextField\n          fullWidth\n          error={commentError}\n          id=\"standard-textarea\"\n          label=\"Введите текст поста\"\n          variant=\"outlined\"\n          multiline\n          rows={4}\n          style={{ marginTop: 11, marginLeft: 10 }}\n          value={comment}\n          onChange={(e) => {\n            setComment(e.target.value);\n            setCommentError(false);\n          }}\n        />\n\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          style={{ marginTop: 11, marginLeft: 10, width: '50%' }}\n          startIcon={<SaveIcon />}\n        >\n          Добавить\n        </Button>\n      </form>\n    </>\n  );\n});\n","import React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport { deepOrange } from '@mui/material/colors';\nimport { Post } from '../types/Post';\n\nexport type Props = {\n  posts: Post[];\n};\n\nexport const PostList: React.FC<Props> = React.memo((props) => {\n  const { posts } = props;\n\n  return (\n    <>\n      <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n        {posts.map(post => (\n          <ListItem key={post.id} style={{ backgroundColor: 'lightGreen', borderRadius: 10, marginBottom: 5 }}>\n            <ListItemAvatar>\n              {post.isValidUrl\n                ? (\n                  <Avatar>\n                    <img src={`${post.avatar}`} alt={`${post.name}`} style={{ width: 60 }} />\n                  </Avatar>\n                )\n                : <Avatar sx={{ bgcolor: deepOrange[500] }}>{post.name[0]}</Avatar>}\n            </ListItemAvatar>\n            <ListItemText\n              primary={`${post.name}`}\n              secondary={`${post.comment}`}\n              style={{ wordWrap: 'break-word' }}\n            />\n          </ListItem>\n        ))}\n\n      </List>\n\n    </>\n  );\n});\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Grid from '@mui/material/Grid';\nimport { Post } from './types/Post';\nimport { NewPost } from './components/NewPost';\nimport { PostList } from './components/PostList';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>(\n    JSON.parse(localStorage.getItem('posts') || '[]'),\n  );\n\n  let id = 0;\n\n  if (posts.length > 0) {\n    id = posts[posts.length - 1].id;\n  }\n\n  const addPost = (post: Post) => {\n    setPosts(prevPosts => [...prevPosts, post]);\n    id += 1;\n    localStorage.setItem('posts', JSON.stringify([...posts, post]));\n  };\n\n  return (\n    <main className=\"main\">\n      <Grid container spacing={2}>\n        <Grid item xs={8}>\n          <div><NewPost onAdd={addPost} postId={id} /></div>\n          <p style={{ textAlign: 'right', fontWeight: 'bold' }}>{`Обьявлений: ${posts.length}`}</p>\n          {posts.length > 0 && <div><PostList posts={[...posts].reverse()} /></div>}\n\n        </Grid>\n        <Grid item xs={4}>\n          {posts.length > 0 && <div><PostList posts={[...posts].slice(-5).reverse()} /></div>}\n        </Grid>\n      </Grid>\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}